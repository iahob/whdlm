//藏宝库IT社区（28xin.com）
#include "StdAfx.h"
#include "GlobalInfoManager.h"

//////////////////////////////////////////////////////////////////////////////////

//构造函数
CGlobalUserItem::CGlobalUserItem()
{
	//用户属性
	m_dwUserID=0L;
	m_dwGameID=0L;
	m_szNickName[0]=0;

	//等级信息
	m_cbMemberOrder=0;
	m_cbMasterOrder=0;

	//链表属性
	m_pNextUserItemPtr=NULL;

	return;
}

//析构函数
CGlobalUserItem::~CGlobalUserItem()
{
}

void CGlobalUserItem::UpdateStatus(const WORD wTableID, const WORD wChairID, const BYTE cbUserStatus)
{
	m_UserInfo.wTableID = wTableID;
	m_UserInfo.wChairID = wChairID;
	m_UserInfo.cbUserStatus = cbUserStatus;
}

//枚举房间
CGlobalServerItem * CGlobalUserItem::EnumServerItem(WORD wIndex)
{
	if (wIndex>=m_GlobalServerItemArray.GetCount()) return NULL;
	return m_GlobalServerItemArray[wIndex];
}

//////////////////////////////////////////////////////////////////////////////////

//构造函数
CGlobalPlazaItem::CGlobalPlazaItem()
{
	//设置变量
	m_wIndex=0;
	ZeroMemory(&m_GamePlaza,sizeof(m_GamePlaza));

	//链表属性
	m_pNextPlazaItemPtr=NULL;

	return;
}

//析构函数
CGlobalPlazaItem::~CGlobalPlazaItem()
{
}

//////////////////////////////////////////////////////////////////////////////////

//构造函数
CGlobalChatItem::CGlobalChatItem()
{
	//设置变量
	m_wIndex=0;
	ZeroMemory(&m_ChatServer,sizeof(m_ChatServer));

	//链表属性
	m_pNextChatServerPtr=NULL;

	return;
}

//析构函数
CGlobalChatItem::~CGlobalChatItem()
{
}

//////////////////////////////////////////////////////////////////////////////////

//构造函数
CGlobalServerItem::CGlobalServerItem()
{
	//设置变量
	m_wIndex=0;
	ZeroMemory(&m_GameServer,sizeof(m_GameServer));

	//链表属性
	m_pNextServerItemPtr=NULL;

	//设置质数
	m_MapUserID.InitHashTable(PRIME_SERVER_USER);

	return;
}

//析构函数
CGlobalServerItem::~CGlobalServerItem()
{
}

//寻找用户
CGlobalUserItem * CGlobalServerItem::SearchUserItem(DWORD dwUserID)
{
	//搜索用户
	CGlobalUserItem * pGlobalUserItem=NULL;
	m_MapUserID.Lookup(dwUserID,pGlobalUserItem);

	return pGlobalUserItem;
}

//////////////////////////////////////////////////////////////////////////////////

//构造函数
CGlobalInfoManager::CGlobalInfoManager()
{
	//存储变量
	m_pGlobalUserItem=NULL;
	m_pGlobalPlazaItem=NULL;
	m_pGlobalServerItem=NULL;
	m_pGlobalChatItem = NULL;

	//设置索引
	m_MapPlazaID.InitHashTable(PRIME_SERVER);
	m_MapServerID.InitHashTable(PRIME_SERVER);
	m_MapUserID.InitHashTable(PRIME_PLATFORM_USER);
	m_MapGameID.InitHashTable(PRIME_PLATFORM_USER);
	m_MapNickName.InitHashTable(PRIME_PLATFORM_USER);
	m_MapChatID.InitHashTable(PRIME_SERVER);
	//约战房
	m_MapPersonalTableInfo.InitHashTable(MAX_SERVER);
	m_ServerTableCountArray.RemoveAll();
	m_MapGroupRoom.InitHashTable(PRIME_PLATFORM_USER);

	return;
}

//析构函数
CGlobalInfoManager::~CGlobalInfoManager()
{
	//删除用户
	DWORD dwUserID=0L;
	CGlobalUserItem * pGlobalUserItem=NULL;
	POSITION Position=m_MapUserID.GetStartPosition();
	while (Position!=NULL)
	{
		m_MapUserID.GetNextAssoc(Position,dwUserID,pGlobalUserItem);
		SafeDelete(pGlobalUserItem);
	}
	m_MapUserID.RemoveAll();

	//删除广场
	WORD wPlazaID=0;
	CGlobalPlazaItem * pGlobalPlazaItem=NULL;
	Position=m_MapPlazaID.GetStartPosition();
	while (Position!=NULL)
	{
		m_MapPlazaID.GetNextAssoc(Position,wPlazaID,pGlobalPlazaItem);
		SafeDelete(pGlobalPlazaItem);
	}
	m_MapPlazaID.RemoveAll();

	//删除房间
	WORD wServerID=0;
	CGlobalServerItem * pGlobalServerItem=NULL;
	Position=m_MapServerID.GetStartPosition();
	while (Position!=NULL)
	{
		m_MapServerID.GetNextAssoc(Position,wServerID,pGlobalServerItem);
		SafeDelete(pGlobalServerItem);
	}
	m_MapServerID.RemoveAll();

	//删除聊天
	WORD wChatID=0;
	CGlobalChatItem * pGlobalChatItem=NULL;
	Position=m_MapChatID.GetStartPosition();
	while (Position!=NULL)
	{
		m_MapChatID.GetNextAssoc(Position,wChatID,pGlobalChatItem);
		SafeDelete(pGlobalChatItem);
	}
	m_MapChatID.RemoveAll();

	//删除用户
	while (m_pGlobalUserItem!=NULL)
	{
		pGlobalUserItem=m_pGlobalUserItem;
		m_pGlobalUserItem=m_pGlobalUserItem->m_pNextUserItemPtr;
		SafeDelete(pGlobalUserItem);
	}

	//删除广场
	while (m_pGlobalPlazaItem!=NULL)
	{
		pGlobalPlazaItem=m_pGlobalPlazaItem;
		m_pGlobalPlazaItem=m_pGlobalPlazaItem->m_pNextPlazaItemPtr;
		SafeDelete(pGlobalPlazaItem);
	}

	//删除房间
	while (m_pGlobalServerItem!=NULL)
	{
		pGlobalServerItem=m_pGlobalServerItem;
		m_pGlobalServerItem=m_pGlobalServerItem->m_pNextServerItemPtr;
		SafeDelete(pGlobalServerItem);
	}

	//删除聊天
	while (m_pGlobalChatItem!=NULL)
	{
		pGlobalChatItem=m_pGlobalChatItem;
		m_pGlobalChatItem=m_pGlobalChatItem->m_pNextChatServerPtr;
		SafeDelete(pGlobalChatItem);
	}

	// 删除俱乐部房间
	CRoomIDArray * pRoomIDArray = NULL;
	Position = m_MapGroupRoom.GetStartPosition();
	DWORD dwGroupID = 0;
	while (Position != NULL)
	{
		m_MapGroupRoom.GetNextAssoc(Position, dwGroupID, pRoomIDArray);
		pRoomIDArray->RemoveAll();
		pRoomIDArray->FreeMemory();
	}
	m_MapGroupRoom.RemoveAll();
	return;
}

//重置数据
VOID CGlobalInfoManager::ResetData()
{
	//删除用户
	DWORD dwUserID=0L;
	CGlobalUserItem * pGlobalUserItem=NULL;
	POSITION Position=m_MapUserID.GetStartPosition();

	//删除用户
	while (Position!=NULL)
	{
		m_MapUserID.GetNextAssoc(Position,dwUserID,pGlobalUserItem);
		if (pGlobalUserItem!=NULL) FreeGlobalUserItem(pGlobalUserItem);
	}

	//删除广场
	WORD wPlazaID=0;
	CGlobalPlazaItem * pGlobalPlazaItem=NULL;
	Position=m_MapPlazaID.GetStartPosition();

	//删除广场
	while (Position!=NULL)
	{
		m_MapPlazaID.GetNextAssoc(Position,wPlazaID,pGlobalPlazaItem);
		if (pGlobalPlazaItem!=NULL) FreeGlobalPlazaItem(pGlobalPlazaItem);
	}

	//删除房间
	WORD wServerID=0;
	CGlobalServerItem * pGlobalServerItem=NULL;
	Position=m_MapServerID.GetStartPosition();

	//删除房间
	while (Position!=NULL)
	{
		m_MapServerID.GetNextAssoc(Position,wServerID,pGlobalServerItem);
		if (pGlobalServerItem!=NULL) FreeGlobalServerItem(pGlobalServerItem);
	}

	//删除聊天
	WORD wChatID=0;
	CGlobalChatItem * pGlobalChatItem=NULL;
	Position=m_MapChatID.GetStartPosition();

	//删除广场
	while (Position!=NULL)
	{
		m_MapChatID.GetNextAssoc(Position,wPlazaID,pGlobalChatItem);
		if (pGlobalChatItem!=NULL) FreeGlobalChatItem(pGlobalChatItem);
	}

	//删除索引
	m_MapUserID.RemoveAll();
	m_MapGameID.RemoveAll();
	m_MapPlazaID.RemoveAll();
	m_MapServerID.RemoveAll();
	m_MapNickName.RemoveAll();
	m_MapChatID.RemoveAll();

	// 删除俱乐部房间
	CRoomIDArray * pRoomIDArray = NULL;
	Position = m_MapGroupRoom.GetStartPosition();
	DWORD dwGroupID = 0;
	while (Position != NULL)
	{
		m_MapGroupRoom.GetNextAssoc(Position, dwGroupID, pRoomIDArray);
		pRoomIDArray->RemoveAll();
		pRoomIDArray->FreeMemory();
	}
	m_MapGroupRoom.RemoveAll();
	return;
}

//查找桌子
tagPersonalTableInfo* CGlobalInfoManager::SearchTableByID(DWORD dwRoomID)
{	
	//定义变量
	tagPersonalTableInfo* pPersonalTable = NULL;
	if(m_MapPersonalTableInfo.Lookup(dwRoomID, pPersonalTable) == TRUE)
		return pPersonalTable;
	return NULL;
}

tagPersonalTableInfo* CGlobalInfoManager::SearchTableByTableIDAndServerID(DWORD dwServerID, DWORD dwTableID)
{
	//移除桌子
	POSITION Position = NULL;
	tagPersonalTableInfo* pPersonalTable = NULL;
	DWORD dwRoomID;
	int iHostCreateRoomCount = 0;
	Position = m_MapPersonalTableInfo.GetStartPosition();
	while(Position != NULL)
	{
		m_MapPersonalTableInfo.GetNextAssoc(Position,dwRoomID,pPersonalTable);
		if(pPersonalTable != NULL && pPersonalTable->dwServerID == dwServerID &&  pPersonalTable->dwTableID == dwTableID)
		{
			return pPersonalTable;
		}
	}

	return NULL;
}

tagPersonalTableInfo *CGlobalInfoManager::SearchTableByPosition(WORD wKindID, BYTE cbPlayMode, DWORD dwGroupID, POSITION & Position, DWORD & dwRoomID)
{
	//移除桌子
	if (Position == NULL)
	{
		Position = m_MapPersonalTableInfo.GetStartPosition();
	}

	tagPersonalTableInfo *pPersonalTable = NULL;

	while (Position != NULL)
	{
		m_MapPersonalTableInfo.GetNextAssoc(Position, dwRoomID, pPersonalTable);
		if (pPersonalTable != NULL && pPersonalTable->dwKindID == wKindID &&  pPersonalTable->dwGroupID == dwGroupID   && pPersonalTable->cbPlayMode == cbPlayMode)
		{
			if (cbPlayMode == 1 && pPersonalTable->cbJoinMode == 0)
			{
				continue;
			}
			return pPersonalTable;
		}
	}

	return NULL;
}

//添加桌子
bool CGlobalInfoManager::AddFreeServerTable(DWORD dwServerID)
{
	//查找房间
	INT_PTR nSize = m_ServerTableCountArray.GetCount();
	CGlobalServerItem* pServerItem = SearchServerItem(static_cast<WORD>(dwServerID));
	if(pServerItem == NULL) return true;
	for(INT_PTR i = 0; i < nSize; ++i)
	{
		tagServerTableCount* pServerTableCount = m_ServerTableCountArray.GetAt(i);
		if(pServerTableCount->dwServerID == dwServerID)
		{
			if(pServerItem->m_GameServer.wTableCount < pServerTableCount->dwTableCount +1) return true;
			pServerTableCount->dwTableCount += 1;
			break;
		}
	}
	return true;
}

//添加桌子
bool CGlobalInfoManager::AddServerTable(DWORD dwRoomID, tagPersonalTableInfo PersonalTable)
{
	//添加桌子
	tagPersonalTableInfo* pPersonalTable = NULL;

	//检查房主创建约战房间的数目，如果创建的数目大于最大数目则不允许创建
	if (GetHostCreatePersonalRoomCount(PersonalTable.dwUserID, PersonalTable.dwKindID, PersonalTable.cbPlayMode) > MAX_CREATE_PERSONAL_ROOM)
	{
		return false;
	}

	//添加桌子
	pPersonalTable = NULL;
	if (m_MapPersonalTableInfo.Lookup(dwRoomID, pPersonalTable) == FALSE)
	{
		pPersonalTable = new tagPersonalTableInfo;

		m_MapPersonalTableInfo[dwRoomID] = pPersonalTable;
		CopyMemory(pPersonalTable, &PersonalTable, sizeof(tagPersonalTableInfo));
	}
	else
	{
		return false;
	}

	return true;
}

//移除空闲桌子
bool CGlobalInfoManager::RemoveFreeServerTable(DWORD dwServerID)
{
	//查找房间
	INT_PTR nSize = m_ServerTableCountArray.GetCount();
	CGlobalServerItem* pServerItem = SearchServerItem(static_cast<WORD>(dwServerID));
	if(pServerItem == NULL) return true;
	for(INT_PTR i = 0; i < nSize; ++i)
	{
		tagServerTableCount* pServerTableCount = m_ServerTableCountArray.GetAt(i);
		if(pServerTableCount->dwServerID == dwServerID)
		{
			if(pServerTableCount->dwTableCount < 1) return true;
			pServerTableCount->dwTableCount -= 1;
			break;
		}
	}
	return true;
}

//移除桌子
bool CGlobalInfoManager::RemoveServerTable(DWORD dwServerID, DWORD dwTableID)
{
	//移除桌子
	POSITION Position = NULL;
	tagPersonalTableInfo* pPersonalTable = NULL;
	DWORD dwRoomID;

	Position = m_MapPersonalTableInfo.GetStartPosition();
	while(Position != NULL)
	{
		m_MapPersonalTableInfo.GetNextAssoc(Position, dwRoomID, pPersonalTable);
		if(pPersonalTable != NULL && pPersonalTable->dwServerID == dwServerID && pPersonalTable->dwTableID == dwTableID)
		{
			//将被解散的坐桌放入解散桌子集合 约战房
			//统计同一个房主被解散的房间数量
			int nOneHostDissumeCount = 0;
			for (int i = 0; i < (int)m_VecDissumePersonalTableInfo.size(); i++)
			{
				if (m_VecDissumePersonalTableInfo[i].dwUserID == pPersonalTable->dwUserID)
				{
					nOneHostDissumeCount++;
				}
			}

			//删除最先被解散的约战房
			if (nOneHostDissumeCount > MAX_CREATE_PERSONAL_ROOM)
			{
				int nOneHostDissumeCount = 0;
				for (int i = 0; i < (int)m_VecDissumePersonalTableInfo.size(); i++)
				{
					if (m_VecDissumePersonalTableInfo[i].dwUserID == pPersonalTable->dwUserID)
					{
						nOneHostDissumeCount = i;
						m_VecDissumePersonalTableInfo.erase(m_VecDissumePersonalTableInfo.begin() + i);
						break;
					}
				}

			}
			m_VecDissumePersonalTableInfo.push_back(*pPersonalTable);

			SafeDelete(pPersonalTable);
			m_MapPersonalTableInfo.RemoveKey(dwRoomID);
			return true;
		}
	}
	return false;
}


//移除桌子
bool CGlobalInfoManager::RemoveServerTable(DWORD dwServerID)
{
	//移除桌子
	POSITION Position = NULL;
	tagPersonalTableInfo* pPersonalTable = NULL;
	DWORD dwRoomID;

	Position = m_MapPersonalTableInfo.GetStartPosition();
	while(Position != NULL)
	{
		m_MapPersonalTableInfo.GetNextAssoc(Position, dwRoomID, pPersonalTable);
		if (Position == NULL)
		{
			break;
		}
		if(pPersonalTable != NULL && pPersonalTable->dwServerID == dwServerID)
		{

			SafeDelete(pPersonalTable);
			m_MapPersonalTableInfo.RemoveKey(dwRoomID);

		}
	}
	return true;
}


//获取房主创建的所有房间
int CGlobalInfoManager::GetHostCreatePersonalRoom(tagHostCreatRoomInfo & HostCreatRoomInfo)
{
	TCHAR szInfo[260] = {0};
	//移除桌子
	POSITION Position = NULL;
	tagPersonalTableInfo* pPersonalTable = NULL;
	DWORD dwRoomID;
	int iHostCreateRoomCount = 0;
	Position = m_MapPersonalTableInfo.GetStartPosition();
	while(Position != NULL)
	{
		m_MapPersonalTableInfo.GetNextAssoc(Position, dwRoomID, pPersonalTable);
		if (pPersonalTable != NULL && pPersonalTable->dwUserID == HostCreatRoomInfo.dwUserID && pPersonalTable->cbPlayMode == 0 && pPersonalTable->dwGroupID==0)
		{
			HostCreatRoomInfo.hRoomCreateInfo[iHostCreateRoomCount].dwPersonalRoomID =  pPersonalTable->dwPersonalRoomID;
			HostCreatRoomInfo.hRoomCreateInfo[iHostCreateRoomCount].wBeginFreeTime = pPersonalTable->wBeginFreeTime;
			HostCreatRoomInfo.hRoomCreateInfo[iHostCreateRoomCount].wEndFreeTime = pPersonalTable->wEndFreeTime;
			HostCreatRoomInfo.hRoomCreateInfo[iHostCreateRoomCount].wCurSitCount = pPersonalTable->wCurSitPlayer;

			iHostCreateRoomCount++;
			//大于最大房间数目返回
			if(iHostCreateRoomCount >= MAX_CREATE_PERSONAL_ROOM)
			{
				return iHostCreateRoomCount;
			}
		}

	}

	//加上已经解散的桌子
	for (int i = m_VecDissumePersonalTableInfo.size() - 1; i >= 0 ; i--)
	{
		if (pPersonalTable != NULL && m_VecDissumePersonalTableInfo[i].dwUserID == HostCreatRoomInfo.dwUserID && m_VecDissumePersonalTableInfo[i].cbPlayMode == 0 && pPersonalTable->dwGroupID == 0)
		{
			HostCreatRoomInfo.hRoomCreateInfo[iHostCreateRoomCount].dwPersonalRoomID = m_VecDissumePersonalTableInfo[i].dwPersonalRoomID;		
			iHostCreateRoomCount++;
			if(iHostCreateRoomCount >= MAX_CREATE_PERSONAL_ROOM)
			{
				break;
			}
		}
	}

	return iHostCreateRoomCount;
}


//获取房主创建的房间的数量
INT CGlobalInfoManager::GetHostCreatePersonalRoomCount(DWORD dwUserID, DWORD dwKindID, BYTE cbPlayMode)
{
	tagPersonalTableInfo* pPersonalTable = NULL;
	POSITION Position = NULL;
	int iHostCreateRoomCount = 0;
	DWORD dwRoomID;
	Position = m_MapPersonalTableInfo.GetStartPosition();
	while(Position != NULL)
	{
		m_MapPersonalTableInfo.GetNextAssoc(Position, dwRoomID, pPersonalTable);
		if (pPersonalTable != NULL && pPersonalTable->dwUserID == dwUserID &&  pPersonalTable->dwKindID == dwKindID && pPersonalTable->cbPlayMode == cbPlayMode)
		{
			iHostCreateRoomCount++;
		}
	}
	return  iHostCreateRoomCount;
}

//获取房间
DWORD CGlobalInfoManager::GetFreeServer(DWORD dwUserID, DWORD dwKindID, BYTE cbIsJoinGame, BYTE cbPlayMode, DWORD dwGroupID)
{

	//变量定义
	POSITION Position;
	bool bExit = false;
	DWORD dwRoomID;

	//如果房主参与游戏
	if (cbIsJoinGame)
	{
		tagPersonalTableInfo* pPersonalTableInfo;
		//查找用户
		Position=m_MapPersonalTableInfo.GetStartPosition();
		while(Position != NULL)
		{
			m_MapPersonalTableInfo.GetNextAssoc(Position, dwRoomID, pPersonalTableInfo);
			if(pPersonalTableInfo != NULL)
			{
				if (pPersonalTableInfo->dwUserID == dwUserID && pPersonalTableInfo->cbPlayMode == cbPlayMode)
				{
					bExit = true;
					return 0;
				}
			}
		}
	}


	//查找房间
	INT_PTR nSize = m_ServerTableCountArray.GetCount();
	for(INT_PTR i = 0; i < nSize; ++i)
	{
		tagServerTableCount* pServerTableCount = m_ServerTableCountArray.GetAt(i);
		if (pServerTableCount->dwKindID == dwKindID && pServerTableCount->cbPlayMode == cbPlayMode && pServerTableCount->dwTableCount > 0)
		{
			return pServerTableCount->dwServerID;
		}
	}
	return 0;
}

//获取房间数目
DWORD CGlobalInfoManager::GetFreeServerCount(DWORD dwKindID, BYTE cbPlayMode)
{
	int iServerCount = 0;
	//查找房间
	INT_PTR nSize = m_ServerTableCountArray.GetCount();
	for(INT_PTR i = 0; i < nSize; ++i)
	{
		tagServerTableCount* pServerTableCount = m_ServerTableCountArray.GetAt(i);
		if (pServerTableCount->dwKindID == dwKindID && cbPlayMode == pServerTableCount->cbPlayMode)
		{
			iServerCount++;
		}
	}

	return iServerCount;
}

//获取房间数目
DWORD CGlobalInfoManager::GetFreeServerCount(DWORD dwKindID, BYTE cbPlayMode, bool bSupportGroup)
{
	int iServerCount = 0;
	//查找房间
	INT_PTR nSize = m_ServerTableCountArray.GetCount();
	for (INT_PTR i = 0; i < nSize; ++i)
	{
		tagServerTableCount* pServerTableCount = m_ServerTableCountArray.GetAt(i);
		if (pServerTableCount->dwKindID == dwKindID && cbPlayMode == pServerTableCount->cbPlayMode && pServerTableCount->bSupportGroup == bSupportGroup)
		{
			iServerCount++;
		}
	}

	return iServerCount;
}

//生成房间ID
DWORD CGlobalInfoManager::RandPersonalRoomID()
{
	//定义变量
	DWORD dwRoomID = 0;
	bool bExit = true;
	srand(rand());
	while(bExit)
	{		
		dwRoomID = rand() % 9999 + (rand() % 88 + 10) * 10000;
		
		if (dwRoomID > 999999 || dwRoomID < 100000) continue;
		//查找ID
		tagPersonalTableInfo* pPersonalTable = NULL;
		if (m_MapPersonalTableInfo.Lookup(dwRoomID, pPersonalTable) == TRUE)
			bExit = true;
		else
			bExit = false;
	}
	return dwRoomID;
}

//激活用户
bool CGlobalInfoManager::ActiveUserItem(tagGlobalUserInfo &GlobalUserInfo, WORD wServerID)
{
	//寻找房间
	CGlobalServerItem *pGlobalServerItem = NULL;
	if (m_MapServerID.Lookup(wServerID, pGlobalServerItem) == FALSE)
	{
		ASSERT(FALSE);
		return false;
	}

	//寻找用户
	CGlobalUserItem *pGlobalUserItem = NULL;
	if (m_MapUserID.Lookup(GlobalUserInfo.dwUserID, pGlobalUserItem) == FALSE)
	{
		//创建用户
		pGlobalUserItem = CreateGlobalUserItem();
		if (pGlobalUserItem == NULL)
		{
			ASSERT(FALSE);
			return false;
		}

		//构造昵称
		TCHAR szNickName[LEN_NICKNAME] = TEXT("");
		lstrcpyn(szNickName, GlobalUserInfo.szNickName, CountArray(szNickName));

		//设置用户
		pGlobalUserItem->m_dwUserID = GlobalUserInfo.dwUserID;
		pGlobalUserItem->m_dwGameID = GlobalUserInfo.dwGameID;
		lstrcpyn(pGlobalUserItem->m_szNickName, GlobalUserInfo.szNickName, CountArray(pGlobalUserItem->m_szNickName));

		//辅助信息
		pGlobalUserItem->m_cbGender = GlobalUserInfo.cbGender;
		pGlobalUserItem->m_cbMemberOrder = GlobalUserInfo.cbMemberOrder;
		pGlobalUserItem->m_cbMasterOrder = GlobalUserInfo.cbMasterOrder;
		memcpy(&pGlobalUserItem->m_UserInfo, &GlobalUserInfo.userInfo, sizeof(tagUserInfo));

		//昵称索引
		m_MapNickName[szNickName] = pGlobalUserItem;

		//设置索引
		m_MapUserID[GlobalUserInfo.dwUserID] = pGlobalUserItem;
		m_MapGameID[GlobalUserInfo.dwGameID] = pGlobalUserItem;
	}
	else
	{
		//重复判断
		for (INT_PTR i = 0; i < pGlobalUserItem->m_GlobalServerItemArray.GetCount(); i++)
		{
			if (pGlobalUserItem->m_GlobalServerItemArray[i]->GetServerID() == wServerID)
			{
				ASSERT(FALSE);
				return false;
			}
		}
	}

	//设置关联
	pGlobalUserItem->m_GlobalServerItemArray.Add(pGlobalServerItem);
	pGlobalServerItem->m_MapUserID[GlobalUserInfo.dwUserID] = pGlobalUserItem;

	return true;
}

//删除用户
bool CGlobalInfoManager::DeleteUserItem(DWORD dwUserID, WORD wServerID)
{
	//寻找用户
	CGlobalUserItem * pGlobalUserItem=NULL;
	if (m_MapUserID.Lookup(dwUserID,pGlobalUserItem)==FALSE) 
	{
		ASSERT(FALSE);
		return false;
	}

	//变量定义
	CGlobalServerItem * pGlobalServerItem=NULL;
	INT_PTR nServerCount=pGlobalUserItem->m_GlobalServerItemArray.GetCount();

	//退出房间
	for (INT_PTR i=0;i<nServerCount;i++)
	{
		//获取房间
		pGlobalServerItem=pGlobalUserItem->m_GlobalServerItemArray[i];

		//房间判断
		if (pGlobalServerItem->GetServerID()==wServerID)
		{
			//删除关联
			pGlobalServerItem->m_MapUserID.RemoveKey(dwUserID);
			pGlobalUserItem->m_GlobalServerItemArray.RemoveAt(i);

			//释放用户
			if (pGlobalUserItem->m_GlobalServerItemArray.GetCount()==0L) 
			{
				//释放索引
				m_MapUserID.RemoveKey(dwUserID);
				m_MapGameID.RemoveKey(pGlobalUserItem->GetGameID());
				m_MapNickName.RemoveKey(pGlobalUserItem->GetNickName());

				//释放对象
				FreeGlobalUserItem(pGlobalUserItem);
			}

			return true;
		}
	}

	//错误断言
	ASSERT(FALSE);

	return false;
}


//删除广场
bool CGlobalInfoManager::DeletePlazaItem(WORD wPlazaID)
{
	//寻找广场
	CGlobalPlazaItem * pGlobalPlazaItem=NULL;
	if (m_MapPlazaID.Lookup(wPlazaID,pGlobalPlazaItem)==FALSE)
	{
		ASSERT(FALSE);
		return false;
	}

	//释放广场
	m_MapPlazaID.RemoveKey(wPlazaID);
	FreeGlobalPlazaItem(pGlobalPlazaItem);

	return true;
}

//激活广场
bool CGlobalInfoManager::ActivePlazaItem(WORD wBindIndex, tagGamePlaza & GamePlaza)
{
	//寻找广场
	CGlobalPlazaItem * pGlobalPlazaItem=NULL;
	if (m_MapPlazaID.Lookup(GamePlaza.wPlazaID,pGlobalPlazaItem)==TRUE)
	{
		ASSERT(FALSE);
		return false;
	}

	//创建广场
	pGlobalPlazaItem=CreateGlobalPlazaItem();
	if (pGlobalPlazaItem==NULL)
	{
		ASSERT(FALSE);
		return false;
	}

	//设置广场
	pGlobalPlazaItem->m_wIndex=wBindIndex;
	pGlobalPlazaItem->m_GamePlaza=GamePlaza;

	//设置索引
	m_MapPlazaID[GamePlaza.wPlazaID]=pGlobalPlazaItem;

	return true;
}

//删除房间
bool CGlobalInfoManager::DeleteServerItem(WORD wServerID)
{
	//寻找房间
	CGlobalServerItem * pGlobalServerItem=NULL;
	if (m_MapServerID.Lookup(wServerID,pGlobalServerItem)==FALSE)
	{
		ASSERT(FALSE);
		return false;
	}

	//变量定义
	DWORD dwUserKey=0L;
	CGlobalUserItem * pGlobalUserItem=NULL;
	POSITION Position=pGlobalServerItem->m_MapUserID.GetStartPosition();

	//删除用户
	while (Position!=NULL)
	{
		//获取数据
		pGlobalServerItem->m_MapUserID.GetNextAssoc(Position,dwUserKey,pGlobalUserItem);

		//房间关联
		for (INT_PTR i=0;i<pGlobalUserItem->m_GlobalServerItemArray.GetCount();i++)
		{
			//获取房间
			CGlobalServerItem * pTempServerItem=pGlobalUserItem->m_GlobalServerItemArray[i];

			//房间判断
			if (pTempServerItem->GetServerID()==wServerID)
			{
				pGlobalUserItem->m_GlobalServerItemArray.RemoveAt(i);
				break;
			}
		}

		//释放用户
		if (pGlobalUserItem->m_GlobalServerItemArray.GetCount()==0)
		{
			m_MapUserID.RemoveKey(dwUserKey);
			FreeGlobalUserItem(pGlobalUserItem);
		}
	}

	//释放房间
	m_MapServerID.RemoveKey(wServerID);
	FreeGlobalServerItem(pGlobalServerItem);

	//查找房间
	INT_PTR nSize = m_ServerTableCountArray.GetCount();
	for(INT_PTR i = 0; i < nSize; ++i)
	{
		tagServerTableCount* pServerTableCount = m_ServerTableCountArray.GetAt(i);
		if(pServerTableCount->dwServerID == wServerID)
		{
			SafeDelete(pServerTableCount);
			m_ServerTableCountArray.RemoveAt(i);
			break;
		}
	}

	//删除用户信息
	DWORD dwRoomID;
	tagPersonalTableInfo* pPersonalTableInfo = NULL;
	Position = m_MapPersonalTableInfo.GetStartPosition();
	while(Position != NULL)
	{
		m_MapPersonalTableInfo.GetNextAssoc(Position, dwRoomID, pPersonalTableInfo);

		if(pPersonalTableInfo != NULL && pPersonalTableInfo->dwServerID == wServerID)
		{

			SafeDelete(pPersonalTableInfo);
			m_MapPersonalTableInfo.RemoveKey(dwRoomID);
		}
		pPersonalTableInfo = NULL;
	}

	//删除用户信息
	RemoveServerTable(wServerID);
	return true;
}

//激活房间
bool CGlobalInfoManager::ActiveServerItem(WORD wBindIndex, BYTE	cbPlayMode, tagGameServer &GameServer)
{
	//寻找房间
	CGlobalServerItem * pGlobalServerItem=NULL;
	if (m_MapServerID.Lookup(GameServer.wServerID,pGlobalServerItem)==TRUE)
	{
		ASSERT(FALSE);
		return false;
	}

	//创建房间
	pGlobalServerItem=CreateGlobalServerItem();
	if (pGlobalServerItem==NULL)
	{
		ASSERT(FALSE);
		return false;
	}

	//设置房间
	pGlobalServerItem->m_wIndex=wBindIndex;
	pGlobalServerItem->m_GameServer=GameServer;

	//设置索引
	m_MapServerID[GameServer.wServerID]=pGlobalServerItem;

	//插入约战房间
	DWORD dwServerID = pGlobalServerItem->GetServerID();
	DWORD dwTableCount = pGlobalServerItem->GetTabelCount();

	//查找房间
	INT_PTR nSize = m_ServerTableCountArray.GetCount();
	bool bExit = false;
	for(INT_PTR i = 0; i < nSize; ++i)
	{
		tagServerTableCount* pServerTableCount = m_ServerTableCountArray.GetAt(i);
		if(pServerTableCount != NULL && pServerTableCount->dwServerID == dwServerID)
		{
			bExit = true;
			break;
		}
	}

	if(bExit == false && pGlobalServerItem->m_GameServer.wServerType == GAME_GENRE_PERSONAL)
	{
		tagServerTableCount* pServerTableCount = new tagServerTableCount;
		pServerTableCount->dwKindID = pGlobalServerItem->GetKindID();
		pServerTableCount->dwServerID = dwServerID;
		pServerTableCount->dwTableCount = dwTableCount;
		pServerTableCount->cbPlayMode = cbPlayMode;
		pServerTableCount->bSupportGroup = CServerRule::IsSuportGroup(GameServer.dwServerRule);

		m_ServerTableCountArray.Add(pServerTableCount);
	}

	return true;
}

//删除聊天
bool CGlobalInfoManager::DeleteChatItem(WORD wChatID)
{
	//寻找广场
	CGlobalChatItem * pGlobalChatItem=NULL;
	if (m_MapChatID.Lookup(wChatID,pGlobalChatItem)==FALSE)
	{
		ASSERT(FALSE);
		return false;
	}

	//释放广场
	m_MapChatID.RemoveKey(wChatID);
	FreeGlobalChatItem(pGlobalChatItem);

	return true;
}

//激活聊天
bool CGlobalInfoManager::ActiveChatItem(WORD wBindIndex, tagChatServer & ChatServer)
{
	//寻找房间
	CGlobalChatItem * pGlobalChatItem=NULL;
	if (m_MapChatID.Lookup(ChatServer.wChatID,pGlobalChatItem)==TRUE)
	{
		ASSERT(FALSE);
		return false;
	}

	//创建房间
	pGlobalChatItem=CreateGlobalChatItem();
	if (pGlobalChatItem==NULL)
	{
		ASSERT(FALSE);
		return false;
	}

	//设置房间
	pGlobalChatItem->m_wIndex=wBindIndex;
	pGlobalChatItem->m_ChatServer=ChatServer;

	//设置索引
	m_MapChatID[ChatServer.wChatID]=pGlobalChatItem;

	return true;
}
//激活俱乐部房间
bool CGlobalInfoManager::ActiveGroupRoom(DWORD dwGroupID, DWORD dwRoomID)
{
	if (dwGroupID == 0) return true;

	CRoomIDArray * pRoomIDArray = NULL;
	BOOL bResult = m_MapGroupRoom.Lookup(dwGroupID, pRoomIDArray);

	if (bResult == 0)
	{
		pRoomIDArray = new CRoomIDArray;
		pRoomIDArray->Add(dwRoomID);
		m_MapGroupRoom[dwGroupID] = pRoomIDArray;
	}
	else
	{
		if (pRoomIDArray)
		{
			pRoomIDArray->Add(dwRoomID);
		}

	}

	return false;
}

//获取俱乐部房间
CRoomIDArray * CGlobalInfoManager::GetGroupRoom(DWORD dwGroupID)
{
	CRoomIDArray * pRoomIDArray = NULL;
	m_MapGroupRoom.Lookup(dwGroupID, pRoomIDArray);
	return pRoomIDArray;
}

//删除俱乐部房间
BOOL CGlobalInfoManager::DeleteGroupRoom(DWORD dwGroupID, DWORD dwRoomID)
{
	if (dwGroupID == 0) return TRUE;

	CRoomIDArray * pRoomIDArray = NULL;
	BOOL bResult = m_MapGroupRoom.Lookup(dwGroupID, pRoomIDArray);

	if (bResult == 0)
	{
		return FALSE;
	}
	else
	{
		for (int i = 0; i < pRoomIDArray->GetCount(); i++)
		{
			if (dwRoomID == pRoomIDArray->GetAt(i))
			{
				pRoomIDArray->RemoveAt(i);
				break;
			}
		}
	}

	return TRUE;
}

//寻找广场
CGlobalPlazaItem * CGlobalInfoManager::SearchPlazaItem(WORD wPlazaID)
{
	//寻找房间
	CGlobalPlazaItem * pGlobalPlazaItem=NULL;
	m_MapPlazaID.Lookup(wPlazaID,pGlobalPlazaItem);

	return pGlobalPlazaItem;
}

//寻找房间
CGlobalServerItem * CGlobalInfoManager::SearchServerItem(WORD wServerID)
{
	//寻找房间
	CGlobalServerItem * pGlobalServerItem=NULL;
	m_MapServerID.Lookup(wServerID,pGlobalServerItem);

	return pGlobalServerItem;
}

//寻找聊天
CGlobalChatItem * CGlobalInfoManager::SearchChatItem(WORD wChatID)
{
	//寻找房间
	CGlobalChatItem * pGlobalChatItem=NULL;
	m_MapChatID.Lookup(wChatID,pGlobalChatItem);

	return pGlobalChatItem;
}

//寻找用户
CGlobalUserItem * CGlobalInfoManager::SearchUserItemByUserID(DWORD dwUserID)
{
	//寻找用户
	CGlobalUserItem * pGlobalUserItem=NULL;
	m_MapUserID.Lookup(dwUserID,pGlobalUserItem);

	return pGlobalUserItem;
}

//寻找用户
CGlobalUserItem * CGlobalInfoManager::SearchUserItemByGameID(DWORD dwGameID)
{
	//寻找用户
	CGlobalUserItem * pGlobalUserItem=NULL;
	m_MapGameID.Lookup(dwGameID,pGlobalUserItem);

	return pGlobalUserItem;
}

//寻找用户
CGlobalUserItem * CGlobalInfoManager::SearchUserItemByNickName(LPCTSTR pszNickName)
{
	//寻找用户
	VOID * pGlobalUserItem=NULL;
	m_MapNickName.Lookup(pszNickName,pGlobalUserItem);

	return (CGlobalUserItem *)pGlobalUserItem;
}

//枚举用户
CGlobalUserItem * CGlobalInfoManager::EnumUserItem(POSITION & Position)
{
	//变量定义
	DWORD dwUserID=0L;
	CGlobalUserItem * pGlobalUserItem=NULL;

	//获取对象
	if (Position==NULL) Position=m_MapUserID.GetStartPosition();
	if (Position!=NULL)	m_MapUserID.GetNextAssoc(Position,dwUserID,pGlobalUserItem);

	return pGlobalUserItem;
}

//枚举广场
CGlobalPlazaItem * CGlobalInfoManager::EnumPlazaItem(POSITION & Position)
{
	//变量定义
	WORD wPlazaID=0L;
	CGlobalPlazaItem * pGlobalPlazaItem=NULL;

	//获取对象
	if (Position==NULL) Position=m_MapPlazaID.GetStartPosition();
	if (Position!=NULL)	m_MapPlazaID.GetNextAssoc(Position,wPlazaID,pGlobalPlazaItem);

	return pGlobalPlazaItem;
}

//枚举房间
CGlobalServerItem * CGlobalInfoManager::EnumServerItem(POSITION & Position)
{
	//变量定义
	WORD wServerID=0L;
	CGlobalServerItem * pGlobalServerItem=NULL;

	//获取对象
	if (Position==NULL) Position=m_MapServerID.GetStartPosition();
	if (Position!=NULL)	m_MapServerID.GetNextAssoc(Position,wServerID,pGlobalServerItem);

	return pGlobalServerItem;
}

//枚举聊天
CGlobalChatItem * CGlobalInfoManager::EnumChatItem(POSITION & Position)
{
	//变量定义
	WORD wChatID=0L;
	CGlobalChatItem * pGlobalChatItem=NULL;

	//获取对象
	if (Position==NULL) Position=m_MapChatID.GetStartPosition();
	if (Position!=NULL)	m_MapChatID.GetNextAssoc(Position,wChatID,pGlobalChatItem);

	return pGlobalChatItem;
}

//创建用户
CGlobalUserItem * CGlobalInfoManager::CreateGlobalUserItem()
{
	//使用存储
	if (m_pGlobalUserItem!=NULL)
	{
		CGlobalUserItem * pGlobalUserItem=m_pGlobalUserItem;
		m_pGlobalUserItem=m_pGlobalUserItem->m_pNextUserItemPtr;
		pGlobalUserItem->m_pNextUserItemPtr=NULL;
		return pGlobalUserItem;
	}

	//创建对象
	try 
	{ 
		CGlobalUserItem * pGlobalUserItem=new CGlobalUserItem;
		return pGlobalUserItem;
	}
	catch (...) {}

	return NULL;
}

//创建广场
CGlobalPlazaItem * CGlobalInfoManager::CreateGlobalPlazaItem()
{
	//使用存储
	if (m_pGlobalPlazaItem!=NULL)
	{
		CGlobalPlazaItem * pGlobalPlazaItem=m_pGlobalPlazaItem;
		m_pGlobalPlazaItem=m_pGlobalPlazaItem->m_pNextPlazaItemPtr;
		pGlobalPlazaItem->m_pNextPlazaItemPtr=NULL;
		return pGlobalPlazaItem;
	}

	//创建对象
	try 
	{ 
		CGlobalPlazaItem * pGlobalPlazaItem=new CGlobalPlazaItem;
		return pGlobalPlazaItem;
	}
	catch (...) {}

	return NULL;
}

//创建房间
CGlobalServerItem * CGlobalInfoManager::CreateGlobalServerItem()
{
	//使用存储
	if (m_pGlobalServerItem!=NULL)
	{
		CGlobalServerItem * pGlobalServerItem=m_pGlobalServerItem;
		m_pGlobalServerItem=m_pGlobalServerItem->m_pNextServerItemPtr;
		pGlobalServerItem->m_pNextServerItemPtr=NULL;
		return pGlobalServerItem;
	}

	//创建对象
	try 
	{ 
		CGlobalServerItem * pGlobalServerItem=new CGlobalServerItem;
		return pGlobalServerItem;
	}
	catch (...) {}

	return NULL;
}

//创建聊天
CGlobalChatItem * CGlobalInfoManager::CreateGlobalChatItem()
{
	//使用存储
	if (m_pGlobalChatItem!=NULL)
	{
		CGlobalChatItem * pGlobalChatItem=m_pGlobalChatItem;
		m_pGlobalChatItem=m_pGlobalChatItem->m_pNextChatServerPtr;
		pGlobalChatItem->m_pNextChatServerPtr=NULL;
		return pGlobalChatItem;
	}

	//创建对象
	try 
	{ 
		CGlobalChatItem * pGlobalChatItem=new CGlobalChatItem;
		return pGlobalChatItem;
	}
	catch (...) {}

	return NULL;
}

//释放用户
bool CGlobalInfoManager::FreeGlobalUserItem(CGlobalUserItem * pGlobalUserItem)
{
	//效验参数
	ASSERT(pGlobalUserItem!=NULL);
	if (pGlobalUserItem==NULL) return false;

	//设置变量
	pGlobalUserItem->m_dwUserID=0L;
	pGlobalUserItem->m_dwGameID=0L;
	pGlobalUserItem->m_szNickName[0]=0;
	ZeroMemory(&pGlobalUserItem->m_UserInfo, sizeof(tagUserInfo));
	pGlobalUserItem->m_GlobalServerItemArray.RemoveAll();

	//加入存储
	pGlobalUserItem->m_pNextUserItemPtr=m_pGlobalUserItem;
	m_pGlobalUserItem=pGlobalUserItem;

	return true;
}

//释放广场
bool CGlobalInfoManager::FreeGlobalPlazaItem(CGlobalPlazaItem * pGlobalPlazaItem)
{
	//效验参数
	ASSERT(pGlobalPlazaItem!=NULL);
	if (pGlobalPlazaItem==NULL) return false;

	//设置变量
	pGlobalPlazaItem->m_wIndex=0;
	ZeroMemory(&pGlobalPlazaItem->m_GamePlaza,sizeof(pGlobalPlazaItem->m_GamePlaza));

	//加入存储
	pGlobalPlazaItem->m_pNextPlazaItemPtr=m_pGlobalPlazaItem;
	m_pGlobalPlazaItem=pGlobalPlazaItem;

	return true;
}

//释放房间
bool CGlobalInfoManager::FreeGlobalServerItem(CGlobalServerItem * pGlobalServerItem)
{
	//效验参数
	ASSERT(pGlobalServerItem!=NULL);
	if (pGlobalServerItem==NULL) return false;

	//设置索引
	pGlobalServerItem->m_MapUserID.RemoveAll();

	//设置变量
	pGlobalServerItem->m_wIndex=0;
	ZeroMemory(&pGlobalServerItem->m_GameServer,sizeof(pGlobalServerItem->m_GameServer));

	//加入存储
	pGlobalServerItem->m_pNextServerItemPtr=m_pGlobalServerItem;
	m_pGlobalServerItem=pGlobalServerItem;

	return true;
}

//释放聊天
bool CGlobalInfoManager::FreeGlobalChatItem(CGlobalChatItem * pGlobalChatItem)
{
	//效验参数
	ASSERT(pGlobalChatItem!=NULL);
	if (pGlobalChatItem==NULL) return false;

	//设置变量
	pGlobalChatItem->m_wIndex=0;
	ZeroMemory(&pGlobalChatItem->m_ChatServer,sizeof(pGlobalChatItem->m_ChatServer));

	//加入存储
	pGlobalChatItem->m_pNextChatServerPtr=m_pGlobalChatItem;
	m_pGlobalChatItem=pGlobalChatItem;

	return true;
}

//添加一种游戏最多创建约战房间的数目
bool CGlobalInfoManager::AddPersonalMaxCreate(CMD_CS_S_RegisterPersonal RegisterPersonal)
{
	int iCount = m_vecPersonalRoomMaxCreate.size();

	//遍历，如果不存在则加入， 如果存在则修改
	bool bIsExist = false;
	for (int i = 0; i < iCount; i++)
	{
		if (m_vecPersonalRoomMaxCreate[i].dwKindID == RegisterPersonal.dwKindID)
		{
			m_vecPersonalRoomMaxCreate[i].dwMaxCreate = RegisterPersonal.dwMaxCreate;
			bIsExist = true;
			break;
		}
	}

	if (!bIsExist)
	{
		m_vecPersonalRoomMaxCreate.push_back(RegisterPersonal);
	}

	return true;
}

//是否可以再创建房间
bool CGlobalInfoManager::CanCreatePersonalRoom(DWORD dwKindID, DWORD dwUserID, BYTE cbPlayMode, DWORD dwGroupID)
{
	//获取可以创建房间的最大数目
	int iCount = m_vecPersonalRoomMaxCreate.size();
	int iMaxCreateCount = 0;
	for (int i = 0; i < iCount; i++)
	{
		if (m_vecPersonalRoomMaxCreate[i].dwKindID == dwKindID && m_vecPersonalRoomMaxCreate[i].cbPlayMode == cbPlayMode)
		{
			iMaxCreateCount = m_vecPersonalRoomMaxCreate[i].dwMaxCreate;
			break;
		}
	}

	if (iMaxCreateCount == 0)
	{
		iMaxCreateCount = MAX_CREATE_COUNT;
	}

	//获得约战房间数目
	int iHaveCreate = GetHostCreatePersonalRoomCount(dwUserID, dwKindID, cbPlayMode);
	if (iHaveCreate < iMaxCreateCount)
	{
		return true;
	}

	return false;
}

//////////////////////////////////////////////////////////////////////////////////
