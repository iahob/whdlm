#ifndef PACKET_HEAD_FILE
#define PACKET_HEAD_FILE

#pragma pack(1)


//////////////////////////////////////////////////////////////////////////////////
//端口定义

#define MAX_CONTENT					512									//并发容量
#define PORT_AUTO_SELECT			INVALID_WORD						//自动端口

#define PORT_LOGON					6801								//登陆端口
#define PORT_CHAT					6802								//聊天端口
#define PORT_CENTER					6803								//协调端口
#define PORT_PERSONAL_ROOM			6804								//约战端口
#define PORT_MANAGER				6805								//管理端口
#define PORT_GROUP					6806								//群组端口
#define PORT_LOG_SERVER				6807								//日志端口
#define PORT_ANDROID_SERVER			6808								//AI分配端口
//////////////////////////////////////////////////////////////////////////////////
//网络定义

//数据类型
#define DK_MAPPED					0x01								//映射类型
#define DK_ENCRYPT					0x02								//加密类型
#define DK_COMPRESS					0x04								//压缩类型

//长度定义
#define SOCKET_TCP_BUFFER			16384								//网络缓冲
#define SOCKET_TCP_PACKET			(SOCKET_TCP_BUFFER-sizeof(TCP_Head))//网络缓冲

//长度定义
#define SOCKET_UDP_BUFFER			16384								//网络缓冲
#define SOCKET_UDP_PACKET			(SOCKET_UDP_BUFFER-sizeof(UDP_Head))//网络缓冲

//////////////////////////////////////////////////////////////////////////////////
//结构定义

//网络内核
struct TCP_Info
{
	BYTE							cbCheckCode;						//效验字段
	BYTE							cbDataKind;							//数据类型	
	WORD							wPacketSize;						//数据大小	
};

//网络命令
struct TCP_Command
{
	WORD							wMainCmdID;							//主命令码
	WORD							wSubCmdID;							//子命令码
};

//网络包头
struct TCP_Head
{
	TCP_Info						TCPInfo;							//基础结构
	TCP_Command						CommandInfo;						//命令信息
};

//网络检查
struct TCP_Validate
{
	TCHAR							szValidateKey[64];					//验证字符
};

//网络缓冲
struct TCP_Buffer
{
	TCP_Head						Head;								//数据包头
	BYTE							cbBuffer[SOCKET_TCP_PACKET];		//数据缓冲
};

//////////////////////////////////////////////////////////////////////////////////

//网络内核
struct UDP_Info
{
	BYTE							cbDataKind;							//数据类型
	BYTE							cbCheckCode;						//效验字段
	WORD							wPacketSize;						//数据大小
	WORD							wPacketIndex;						//数据序列
	WORD							wConnectIndex;						//连接索引
};


//网络命令
struct UDP_Command
{
	WORD							wMainCmdID;							//主命令码
	WORD							wSubCmdID;							//子命令码
};


//网络包头
struct UDP_Head
{
	UDP_Info						UDPInfo;							//基础结构
	UDP_Command						CommandInfo;						//命令信息
};

//网络缓冲
struct UDP_Buffer
{
	UDP_Head						Head;								//数据包头
	BYTE							cbBuffer[SOCKET_UDP_PACKET];		//数据缓冲
};

//////////////////////////////////////////////////////////////////////////////////

//内核命令
#define MDM_KN_COMMAND				0									//内核命令
#define SUB_KN_DETECT_SOCKET		1									//检测命令
#define SUB_KN_VALIDATE_SOCKET		2									//验证命令

//////////////////////////////////////////////////////////////////////////////////
//传输数据

#define IPC_VER						1									//版本标识
#define IPC_PACKET					(10240-sizeof(IPC_Head))			//最大包长
#define IPC_BUFFER					(sizeof(IPC_Head)+IPC_PACKET)		//缓冲长度

//数据包头
struct IPC_Head
{
	WORD							wVersion;							//版本标识
	WORD							wPacketSize;						//数据大小
	WORD							wMainCmdID;							//主命令码
	WORD							wSubCmdID;							//子命令码
};

//IPC 包结构
struct IPC_Buffer
{
	IPC_Head						Head;								//数据包头
	BYTE							cbBuffer[IPC_PACKET];				//数据缓冲
};

//////////////////////////////////////////////////////////////////////////////////
//数据定义

//加密密钥
const DWORD g_dwPacketKey[] = {0x010667F0,0x0984A500,0x00000000,0x001B22E8};

//发送映射
const BYTE g_SendByteMap[256] =
{
	0x89,0x35,0xB8,0xE6,0xB1,0x70,0xA1,0x50,0x01,0xAE,0x2E,0x3B,0xEE,0x8F,0xEF,0x5F,
	0x28,0x19,0xC5,0x4F,0xA3,0xCC,0x5E,0xCF,0x1E,0x1A,0xD5,0x36,0xE4,0xF0,0x17,0x15,
	0x2D,0x94,0x56,0x83,0x86,0x6E,0x20,0x71,0x10,0x77,0xAD,0x5C,0x72,0xAB,0x06,0x58,
	0x43,0x93,0xF5,0xD8,0xFF,0x57,0x42,0x67,0x29,0x4A,0x22,0xA8,0xB3,0xFA,0xFE,0x11,
	0xFC,0xEC,0xBF,0xCB,0xED,0x27,0x8E,0xF4,0x75,0x4E,0x4B,0xA2,0x02,0x14,0xD9,0x7E,
	0xE3,0x92,0x09,0x7B,0xA7,0x03,0xDC,0x9C,0xDD,0xD3,0x18,0xA0,0xE7,0x69,0xE8,0x8B,
	0x8A,0x05,0x0D,0x2A,0xFB,0x3A,0x6D,0x12,0xC6,0xC4,0x9F,0x3C,0xC3,0x0C,0xFD,0xF6,
	0xDF,0xCD,0x95,0xBE,0x73,0x79,0x91,0xB7,0x6C,0xD7,0xA9,0xEB,0x13,0x1C,0x5B,0xAC,
	0xF2,0x32,0x59,0x0B,0xDA,0x25,0x40,0x2C,0xBA,0xC0,0x78,0x61,0xDE,0x33,0x3D,0xC2,
	0x8D,0xE0,0xD1,0x90,0xF8,0x99,0x80,0xC9,0xE9,0xB9,0x26,0x0A,0xF1,0x30,0x2F,0x51,
	0xC8,0x04,0x53,0xA6,0x64,0x7A,0x97,0xCE,0x48,0x23,0xB5,0xD6,0x46,0xA4,0x65,0xC1,
	0x9D,0x07,0x74,0xD0,0x3E,0xB4,0xB0,0x3F,0xF3,0x16,0xAF,0x24,0x9E,0x0F,0xB2,0xF9,
	0x08,0xD2,0x82,0x39,0x6A,0xAA,0x7F,0x98,0x44,0xE1,0x81,0x1B,0x00,0x52,0x66,0x4C,
	0x47,0xC7,0xDB,0xCA,0x54,0x5A,0x21,0x63,0x1D,0x76,0xE2,0x85,0xA5,0x84,0xF7,0x6B,
	0x87,0x88,0x9A,0x62,0x37,0x8C,0x4D,0xBD,0x2B,0x55,0xE5,0x6F,0xEA,0x7D,0x96,0x41,
	0x45,0x7C,0x49,0x60,0xBB,0xB6,0x68,0x1F,0x9B,0x5D,0xBC,0x34,0x38,0x0E,0xD4,0x31
};

//接收映射
const BYTE g_RecvByteMap[256] =
{
	0xCC,0x08,0x4C,0x55,0xA1,0x61,0x2E,0xB1,0xC0,0x52,0x9B,0x83,0x6D,0x62,0xFD,0xBD,
	0x28,0x3F,0x67,0x7C,0x4D,0x1F,0xB9,0x1E,0x5A,0x11,0x19,0xCB,0x7D,0xD8,0x18,0xF7,
	0x26,0xD6,0x3A,0xA9,0xBB,0x85,0x9A,0x45,0x10,0x38,0x63,0xE8,0x87,0x20,0x0A,0x9E,
	0x9D,0xFF,0x81,0x8D,0xFB,0x01,0x1B,0xE4,0xFC,0xC3,0x65,0x0B,0x6B,0x8E,0xB4,0xB7,
	0x86,0xEF,0x36,0x30,0xC8,0xF0,0xAC,0xD0,0xA8,0xF2,0x39,0x4A,0xCF,0xE6,0x49,0x13,
	0x07,0x9F,0xCD,0xA2,0xD4,0xE9,0x22,0x35,0x2F,0x82,0xD5,0x7E,0x2B,0xF9,0x16,0x0F,
	0xF3,0x8B,0xE3,0xD7,0xA4,0xAE,0xCE,0x37,0xF6,0x5D,0xC4,0xDF,0x78,0x66,0x25,0xEB,
	0x05,0x27,0x2C,0x74,0xB2,0x48,0xD9,0x29,0x8A,0x75,0xA5,0x53,0xF1,0xED,0x4F,0xC6,
	0x96,0xCA,0xC2,0x23,0xDD,0xDB,0x24,0xE0,0xE1,0x00,0x60,0x5F,0xE5,0x90,0x46,0x0D,
	0x93,0x76,0x51,0x31,0x21,0x72,0xEE,0xA6,0xC7,0x95,0xE2,0xF8,0x57,0xB0,0xBC,0x6A,
	0x5B,0x06,0x4B,0x14,0xAD,0xDC,0xA3,0x54,0x3B,0x7A,0xC5,0x2D,0x7F,0x2A,0x09,0xBA,
	0xB6,0x04,0xBE,0x3C,0xB5,0xAA,0xF5,0x77,0x02,0x99,0x88,0xF4,0xFA,0xE7,0x73,0x42,
	0x89,0xAF,0x8F,0x6C,0x69,0x12,0x68,0xD1,0xA0,0x97,0xD3,0x43,0x15,0x71,0xA7,0x17,
	0xB3,0x92,0xC1,0x59,0xFE,0x1A,0xAB,0x79,0x33,0x4E,0x84,0xD2,0x56,0x58,0x8C,0x70,
	0x91,0xC9,0xDA,0x50,0x1C,0xEA,0x03,0x5C,0x5E,0x98,0xEC,0x7B,0x41,0x44,0x0C,0x0E,
	0x1D,0x9C,0x80,0xB8,0x47,0x32,0x6F,0xDE,0x94,0xBF,0x3D,0x64,0x40,0x6E,0x3E,0x34
};

//////////////////////////////////////////////////////////////////////////////////

#pragma pack()

#endif